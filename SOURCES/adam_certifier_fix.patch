diff --git a/plugins/experimental/certifier/certifier.cc b/plugins/experimental/certifier/certifier.cc
index 9415d75..cf003a4 100644
--- a/plugins/experimental/certifier/certifier.cc
+++ b/plugins/experimental/certifier/certifier.cc
@@ -42,11 +42,18 @@
 #include <fstream>       // ofstream
 #include <memory>
 #include <algorithm>
+#include <assert.h>
 
 #include "ts/ts.h"
 
 const char *PLUGIN_NAME = "certifier";
 
+template <class ReturnType, class ArgType, ReturnType (*fun)(ArgType)>
+struct HardFun {
+    ReturnType operator()(ArgType arg) { return fun(arg); }
+};
+typedef std::unique_ptr<BIGNUM, HardFun<void, BIGNUM*, &BN_free>> BIGNUM_Pointer;
+
 /// Override default delete for unique ptrs to openSSL objects
 namespace std
 {
@@ -176,8 +183,10 @@ public:
     auto iter = cnDataMap.find(commonName);
     if (iter != cnDataMap.end()) {
       std::swap(localQ, iter->second->vconnQ);
-      iter->second->ctx    = std::move(ctx);
-      iter->second->cert   = std::move(cert); ///< We might not need cert, can be easily removed
+      if (nullptr == iter->second->ctx) { // only set once, or coredump - fixed by adam 2019-07-26
+        iter->second->ctx    = std::move(ctx);
+        iter->second->cert   = std::move(cert); ///< We might not need cert, can be easily removed
+      }
       iter->second->wontdo = wontdo;
     }
     TSMutexUnlock(list_mutex);
@@ -308,9 +317,11 @@ static scoped_X509 ca_cert_scoped;
 static scoped_EVP_PKEY ca_pkey_scoped;
 // static scoped_EVP_PKEY  ts_pkey_scoped;
 
+#if 0
 static int ca_serial;            ///< serial number
 static std::fstream serial_file; ///< serial number file
 static TSMutex serial_mutex;     ///< serial number mutex
+#endif
 
 // Management Object
 static std::unique_ptr<SslLRUList> ssl_list = nullptr;
@@ -349,9 +360,61 @@ mkcsr(const char *cn)
   return req;
 }
 
+static  BIGNUM *createCertSerial(unsigned char *md, unsigned int n)
+{
+
+    assert(n == MD5_DIGEST_LENGTH); //for sha1 n is 20 (for md5 n is 16)
+
+    BIGNUM *serial = NULL;
+    serial = BN_bin2bn(md, n, NULL);
+
+    // if the serial is "0" set it to '1'
+    if (BN_is_zero(serial) == true)
+        BN_one(serial);
+
+    // serial size does not exceed 20 bytes
+    assert(BN_num_bits(serial) <= 160);
+
+    // According the RFC 5280, serial is an 20 bytes ASN.1 INTEGER (a signed big integer)
+    // and the maximum value for X.509 certificate serial number is 2^159-1 and
+    // the minimum 0. If the first bit of the serial is '1' ( eg 2^160-1),
+    // will result to a negative integer.
+    // To handle this, if the produced serial is greater than 2^159-1
+    // truncate the last bit
+    if (BN_is_bit_set(serial, 159))
+        BN_clear_bit(serial, 159);
+
+    return serial;
+}
+
+/**
+ \ingroup ServerProtocolSSLInternal
+ * Set serial random serial number or set random serial number.
+ */
+static bool setSerialNumber(ASN1_INTEGER *ai, BIGNUM const* serial)
+{
+    if (!ai)
+        return false;
+    BIGNUM_Pointer bn(BN_new());
+    if (serial) {
+        bn.reset(BN_dup(serial));
+    } else {
+        if (!bn)
+            return false;
+
+        if (!BN_pseudo_rand(bn.get(), 64, 0, 0))
+            return false;
+    }
+
+    if (ai && !BN_to_ASN1_INTEGER(bn.get(), ai))
+        return false;
+    return true;
+}
+
+
 /// Local helper function that generates a X509 certificate based on CSR
 static scoped_X509
-mkcrt(X509_REQ *req, int serial)
+mkcrt(X509_REQ *req, unsigned char *digest)
 {
   TSDebug(PLUGIN_NAME, "Entering mkcrt()...");
   X509_NAME *subj, *tmpsubj;
@@ -368,7 +431,15 @@ mkcrt(X509_REQ *req, int serial)
 
   /// Set serial number
   // TSDebug("txn_monitor", "serial: %d", serial);
-  ASN1_INTEGER_set(X509_get_serialNumber(cert.get()), serial);
+  //ASN1_INTEGER_set(X509_get_serialNumber(cert.get()), serial);
+  // gen serial number - added by adam 2019-07-22
+  BIGNUM *new_serial = createCertSerial(digest, MD5_DIGEST_LENGTH);
+  if (!setSerialNumber(X509_get_serialNumber(cert.get()), new_serial)) {
+    BN_free(new_serial);
+    TSError("[%s] mkcrt(): Failed to set serial number.", PLUGIN_NAME);
+    return nullptr;
+  }
+  BN_free(new_serial);
 
   /// Set issuer from CA cert
   if (X509_set_issuer_name(cert.get(), X509_get_subject_name(ca_cert_scoped.get())) == 0) {
@@ -376,8 +447,10 @@ mkcrt(X509_REQ *req, int serial)
     return nullptr;
   }
   /// Set certificate time
-  X509_gmtime_adj(X509_get_notBefore(cert.get()), 0);
-  X509_gmtime_adj(X509_get_notAfter(cert.get()), (long)3650 * 24 * 3600);
+  //X509_gmtime_adj(X509_get_notBefore(cert.get()), 0);
+  //X509_gmtime_adj(X509_get_notAfter(cert.get()), (long)3650 * 24 * 3600);
+  ASN1_TIME_set_string( X509_get_notBefore(cert.get()), "20190723235959Z");
+  ASN1_TIME_set_string( X509_get_notAfter(cert.get()),  "20290723235959Z");
 
   /// Get a handle to csr subject name
   subj = X509_REQ_get_subject_name(req);
@@ -402,6 +475,36 @@ mkcrt(X509_REQ *req, int serial)
     return nullptr;
   }
 
+  // add subject cn extensions - added by adam 2019-07-10
+  //refer squid 4.7 addAltNameWithSubjectCn
+  do {
+    X509_NAME *name = X509_REQ_get_subject_name(req);
+    if (!name)
+      break;
+
+    const int loc = X509_NAME_get_index_by_NID(name, NID_commonName, -1);
+    if (loc < 0)
+      break;
+
+    ASN1_STRING *cn_data = X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name, loc));
+    if (!cn_data)
+      break;
+
+    char dnsName[1024]; // DNS names are limited to 256 characters
+    const int res = snprintf(dnsName, sizeof(dnsName), "DNS:%*s", cn_data->length, cn_data->data);
+    if (res <= 0 || res >= static_cast<int>(sizeof(dnsName)))
+      break;
+    //TSDebug(PLUGIN_NAME, "adam_debug dnsName %s", dnsName);
+
+    X509_EXTENSION *ext = X509V3_EXT_conf_nid(NULL, NULL, NID_subject_alt_name, dnsName);
+    if (!ext)
+      break;
+
+    (void)X509_add_ext(cert.get(), ext, -1);
+    X509_EXTENSION_free(ext);
+
+  } while (0);
+
   X509_sign(cert.get(), ca_pkey_scoped.get(), EVP_sha256());
 
   return cert;
@@ -469,6 +572,7 @@ shadow_cert_generator(TSCont contp, TSEvent event, void *edata)
     }
     TSDebug(PLUGIN_NAME, "shadow_cert_generator(): Creating shadow certs");
 
+#if 0
     /// Get serial number
     TSMutexLock(serial_mutex);
     int serial = ca_serial++;
@@ -480,6 +584,7 @@ shadow_cert_generator(TSCont contp, TSEvent event, void *edata)
     }
 
     TSMutexUnlock(serial_mutex);
+#endif
 
     /// Create CSR and cert
     req = mkcsr(commonName.c_str());
@@ -490,7 +595,7 @@ shadow_cert_generator(TSCont contp, TSEvent event, void *edata)
       return TS_ERROR;
     }
 
-    cert = mkcrt(req.get(), serial);
+    cert = mkcrt(req.get(), digest);
 
     if (cert == nullptr) {
       TSDebug(PLUGIN_NAME, "[shadow_cert_generator] Cert generation failed");
@@ -593,12 +698,12 @@ TSPluginInit(int argc, const char *argv[])
 
   const char *key    = nullptr;
   const char *cert   = nullptr;
-  const char *serial = nullptr;
+  //const char *serial = nullptr;
 
   // Read options from plugin.config
   static const struct option longopts[] = {
     {"sign-cert", required_argument, nullptr, 'c'},   {"sign-key", required_argument, nullptr, 'k'},
-    {"sign-serial", required_argument, nullptr, 'r'}, {"max", required_argument, nullptr, 'm'},
+    /* {"sign-serial", required_argument, nullptr, 'r'}, */ {"max", required_argument, nullptr, 'm'},
     {"store", required_argument, nullptr, 's'},       {nullptr, no_argument, nullptr, 0}};
 
   int opt = 0;
@@ -614,10 +719,12 @@ TSPluginInit(int argc, const char *argv[])
       key = optarg;
       break;
     }
+#if 0
     case 'r': {
       serial = optarg;
       break;
     }
+#endif
     case 'm': {
       ssl_list.reset(new SslLRUList(static_cast<int>(std::strtol(optarg, nullptr, 0))));
       break;
@@ -642,7 +749,7 @@ TSPluginInit(int argc, const char *argv[])
   } else if ((cb_shadow = TSContCreate(cert_retriever, nullptr)) == nullptr) {
     TSError("[%s] Unable to initialize plugin (disabled). Failed to create shadow cert cb.", PLUGIN_NAME);
   } else {
-    if ((sign_enabled = cert && key && serial)) {
+    if ((sign_enabled = cert && key /* && serial */)) {
       // Dynamic cert generation enabled. Initialize CA key, cert and serial
       // To comply to openssl, key and cert file are opened as FILE*
       FILE *fp = nullptr;
@@ -668,6 +775,7 @@ TSPluginInit(int argc, const char *argv[])
         return;
       }
 
+#if 0
       // Read serial file
       serial_file.open(serial, std::fstream::in | std::fstream::out);
       if (!serial_file.is_open()) {
@@ -684,6 +792,7 @@ TSPluginInit(int argc, const char *argv[])
       if (serial_file.bad() || serial_file.fail()) {
         ca_serial = 0;
       }
+#endif
     }
     TSDebug(PLUGIN_NAME, "Dynamic cert generation %s", sign_enabled ? "enabled" : "disabled");
 
