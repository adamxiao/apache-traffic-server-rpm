diff --git a/proxy/http/remap/RemapConfig.cc b/proxy/http/remap/RemapConfig.cc
index d528c1f..06d1257 100644
--- a/proxy/http/remap/RemapConfig.cc
+++ b/proxy/http/remap/RemapConfig.cc
@@ -21,6 +21,7 @@
  *  limitations under the License.
  */
 
+#include <string>
 #include "RemapConfig.h"
 #include "UrlRewrite.h"
 #include "ReverseProxy.h"
@@ -1023,6 +1024,124 @@ lFail:
   return false;
 }
 
+static unsigned char *
+aes_decrypt(unsigned char *ciphertext, int ciphertext_len,
+    unsigned char *key, unsigned char *iv, int *dec_len_ptr)
+{
+  EVP_CIPHER_CTX *ctx = nullptr;
+  int len = 0;
+  int plaintext_len = 0;
+  unsigned char *plaintext = (unsigned char *)ats_malloc(ciphertext_len);
+
+  bzero(plaintext,ciphertext_len);
+
+  /* Create and initialise the context */
+  if(!(ctx = EVP_CIPHER_CTX_new())) {
+    ERR_print_errors_fp(stderr);
+    ats_free(plaintext);
+    return nullptr;
+  }
+
+  /* Initialise the decryption operation. IMPORTANT - ensure you use a key
+   * and IV size appropriate for your cipher
+   * In this example we are using 256 bit AES (i.e. a 256 bit key). The
+   * IV size for *most* modes is the same as the block size. For AES this
+   * is 128 bits */
+  if(1 != EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv)) {
+    ERR_print_errors_fp(stderr);
+    ats_free(plaintext);
+    EVP_CIPHER_CTX_free(ctx);
+    return nullptr;
+  }
+
+  EVP_CIPHER_CTX_set_key_length(ctx, EVP_MAX_KEY_LENGTH);
+
+ /* Provide the message to be decrypted, and obtain the plaintext output.
+   * EVP_DecryptUpdate can be called multiple times if necessary
+   */
+  if(1 != EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {
+    ERR_print_errors_fp(stderr);
+    ats_free(plaintext);
+    EVP_CIPHER_CTX_free(ctx);
+    return nullptr;
+  }
+
+  plaintext_len = len;
+
+  /* Finalise the decryption. Further plaintext bytes may be written at
+   * this stage.
+   */
+  if(1 != EVP_DecryptFinal_ex(ctx, plaintext + len, &len)) {
+    ERR_print_errors_fp(stderr);
+    ats_free(plaintext);
+    EVP_CIPHER_CTX_free(ctx);
+    return nullptr;
+  }
+  plaintext_len += len;
+
+  /* Add the null terminator */
+  plaintext[plaintext_len] = 0;
+
+  if (dec_len_ptr) {
+    *dec_len_ptr = plaintext_len;
+  }
+
+  /* Clean up */
+  EVP_CIPHER_CTX_free(ctx);
+  return plaintext;
+}
+
+
+static void
+initAES(const std::string& pass, unsigned char* salt, unsigned char* key, unsigned char* iv)
+{
+  bzero(key,sizeof(key));
+  bzero(iv,sizeof(iv));
+
+  EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha1(), salt, (unsigned char*)pass.c_str(), pass.length(), 1, key, iv);
+}
+
+static char *
+remap_dec_config_bti(char *ciphertext, size_t cipher_len, int *dec_len_ptr)
+{
+  unsigned char salt[8];
+  //ERR_load_crypto_strings();
+
+  unsigned char key[32] = {0};
+  unsigned char iv[32] = {0};
+
+  if (strncmp((const char*)ciphertext,"Salted__",8) == 0) {
+    memcpy(salt,&ciphertext[8],8);
+    ciphertext += 16;
+    cipher_len -= 16;
+  }
+  initAES("ksvd@2019", salt, key, iv);
+
+  char* dec_buf = (char*)aes_decrypt((unsigned char*)ciphertext, cipher_len, key, iv, dec_len_ptr);
+
+  // Clean up
+  //EVP_cleanup();
+  //ERR_free_strings();
+  return dec_buf;
+}
+
+static char *
+decReadIntoBuffer(const char *file_path, const char *module_name, int *read_size_ptr)
+{
+  char *ciphertext = nullptr;
+  int cipher_len = 0;
+
+  ciphertext = readIntoBuffer(file_path, module_name, &cipher_len);
+  if (nullptr == ciphertext) {
+    return nullptr;
+  }
+
+  char *dec_buf = remap_dec_config_bti(ciphertext, cipher_len, read_size_ptr);
+  ats_free(ciphertext);
+
+  return dec_buf;
+}
+
 static bool
 remap_parse_config_bti(const char *path, BUILD_TABLE_INFO *bti)
 {
@@ -1059,7 +1178,8 @@ remap_parse_config_bti(const char *path, BUILD_TABLE_INFO *bti)
   bool is_cur_mapping_regex;
   const char *type_id_str;
 
-  ats_scoped_str file_buf(readIntoBuffer(path, modulePrefix, nullptr));
+  // dec read remap.config - modified by adam 2019-08-07
+  ats_scoped_str file_buf(decReadIntoBuffer(path, modulePrefix, nullptr));
   if (!file_buf) {
     Warning("can't load remapping configuration file %s", path);
     return false;
