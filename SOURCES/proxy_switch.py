#!/usr/bin/python -t
# -*- coding:utf-8 -*-

# refer https://github.com/ldx/python-iptables

"""
pip install --upgrade python-iptables

yum install iptables-services -y
systemctl enable iptables

# iptables-save > /etc/sysconfig/iptables
cat > /etc/sysconfig/iptables << EOF
# tranparent proxy generated by xiaoyun
*nat
-A PREROUTING ! -s $proxy_ip/32 -p tcp -m tcp --dport 80 -j DNAT --to-destination $proxy_ip:3080
-A PREROUTING ! -s $proxy_ip/32 -p tcp -m tcp --dport 443 -j DNAT --to-destination $proxy_ip:3443
COMMIT
EOF
"""

import iptc
import sys

http_port="3080"
https_port="3443"

def match_port(rule, ports):
    """docstring for match_port"""
    for match in rule.matches:
        if match.dport and match.dport in ports:
            return True
    return False

def del_proxy_iptc(ports):
    """docstring for clear_iptc proxy"""
    table = iptc.Table(iptc.Table.NAT)
    table.autocommit = False
    chain = iptc.Chain(table, "PREROUTING")
    for rule in chain.rules:
        if 'DNAT' != rule.target.name:
            continue
        if match_port(rule, ports):
            chain.delete_rule(rule)
    table.commit()
    table.autocommit = True
    table.refresh()
    pass

def clear_proxy_iptc():
    """docstring for clear_iptc proxy"""
    del_proxy_iptc(['80', '443'])
    proxy_save(None)

def add_proxy(port, ip, proxy_addr):
    proxy_rule = {'src': '!%s/32' % ip, 'protocol': 'tcp', 'target': {'DNAT': {'to-destination': proxy_addr}}, 'tcp': {'dport': port}}

    old_rule = get_cur_proxy(port)
    if not old_rule:
        iptc.easy.insert_rule('nat', 'PREROUTING', proxy_rule)
        return

    params = old_rule.target.get_all_parameters()
    if 'to-destination' in params and proxy_addr == params['to-destination'][0]:
        print 'already port %s proxyed %s' % (port, proxy_addr)
        return

    del_proxy_iptc([port])
    iptc.easy.insert_rule('nat', 'PREROUTING', proxy_rule)
    return

def proxy_save(proxy_ip):
    """docstring for proxy_save"""
    # 打开文件
    fo = open("/etc/sysconfig/iptables", "w")
    if proxy_ip:
        fo.write('''
# tranparent proxy generated by xiaoyun
*nat
-A PREROUTING ! -s %s/32 -p tcp -m tcp --dport 80 -j DNAT --to-destination %s:3080
-A PREROUTING ! -s %s/32 -p tcp -m tcp --dport 443 -j DNAT --to-destination %s:3443
COMMIT
                ''' % (proxy_ip, proxy_ip, proxy_ip, proxy_ip))
        pass
    # 关闭文件
    fo.close()
    pass


def enable_proxy_iptc(proxy_ip):
    http_proxy = proxy_ip + ':' + http_port
    https_proxy = proxy_ip + ':' + https_port
    add_proxy('80', proxy_ip, http_proxy)
    add_proxy('443', proxy_ip, https_proxy)
    proxy_save(proxy_ip)


def get_cur_proxy(port):
    table = iptc.Table(iptc.Table.NAT)
    chain = iptc.Chain(table, "PREROUTING")
    for rule in chain.rules:
        if 'DNAT' != rule.target.name:
            continue
        for match in rule.matches:
            if match.dport and port == match.dport:
                return rule
    return None

def usage():
    """docstring for usage"""
    print('usage: %s enable|disable [proxy_ip]' % sys.argv[0])
    pass

def main():
    """docstring for main"""
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)
    enable_proxy = sys.argv[1]
    if 'enable' == enable_proxy:
        if len(sys.argv) < 3:
            usage()
            sys.exit(2)
        proxy_ip = sys.argv[2]
        enable_proxy_iptc(proxy_ip)
    elif 'disable' == enable_proxy:
        clear_proxy_iptc()
    else:
        usage()
        sys.exit(1)

if __name__ == '__main__':
    main()
